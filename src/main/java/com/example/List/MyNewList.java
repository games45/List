package com.example.List;

/**
 * Интерфейс лист определяет основные методы. Упорядоченная коллекция, все элементы сохраняются в том порядке, в котором были добавлены.
 * Реализации данного интерфейса могут накладывать свои дополнительные ограничения.
 * Внутреннй массив реализаций начинается с нуля.
 * Будущие реализации должны быть взаимозаменяемыми.
 * @param <T> тип элементов в списке
 * @see MyNewArrayList
 */
public interface MyNewList<T> {
    /**
     * Добавляет переданный элемент в конец списка. Увеличивает счётчик элементов на 1.
     * @param  element элемент, который нужно добавить
     * @return возвращает true, когда элемент добавлен.
     */
    boolean add(T element);
    /**
     * Добавляет переданный элемент и ставит его в указанную ячейку по индексу.
     * Все остальные элементы начиная с того, который был указан по индексу смещаются вправо.
     * Увеличивает счётчик элементов на 1.
     * @param  element элемент, который нужно добавить
     * @param index индекс ячейки, в которую нужно добавить элемент
     * @return возвращает true, когда элемент добавлен.
     * @throws IndexOutOfBoundsException если указанного индекса не существует
     */
    boolean add(T element, int index) ;

    /**
     * Удаляет элемента находящийся по указанному индексу. Элементы справ от него смещает влево, что бы заполнить пустую ячейку.
     * Уменьшает счётчик элементов на 1.
     * @param index индекс элемента, который нужно удалить
     * @return возвращает true, когда элемент добавлен.
     * @throws IndexOutOfBoundsException если указанного индекса не существует
     * @throws ArrayIndexOutOfBoundsException в реализациях использующих внутренний массив будет выброшено если удалять элемент с индексом ноль из пустой коллекции.
     * @throws NullPointerException в реализациях через связанный список будет выброшено если удалять элемент с индексом ноль из пустой коллекции.
     */
    boolean remove(int index);

    /**
     * Удаляет первый подходящий элемент, если он существует в списке. Элементы справ от него смещает влево, что бы заполнить пустую ячейку, если элемент был удалён.
     * Уменьшает счётчик элементов на 1, если элемент удалён.
     * @param element элемент который нужно удалить
     * @return возвращает true, когда элемент удалён.
     * @return возвращает false, если элемент не был найден.
     */
    boolean remove(T element);

    /**
     * Возвращает элемент по индексу.
     * @param index индекс элемента, который нужно вернуть.
     * @return элемент по указанному индексу
     * @throws IndexOutOfBoundsException если индекс выходит за рамки допустимого диапазона
     */
    T get(int index);

    /**
     * Метод заменяет элемент по указанному индексу, на переданный элемент.
     * @param index индекс элемента, который нужно заменить
     * @param element элемент на который меняется текущий элемент
     * @throws IndexOutOfBoundsException если элемента с указанным индексом не существует
     */
    void set(int index, T element);

    /**
     * Возвращает количество элементов имеющихся в списке.
     * @return целочисленное число имеющихся элементов.
     */
    int size();

    /**
     * Метод создаёт и возвращает новый список MyNewList. В новый список добавлены все элементы из списка,
     * к которому метод применяется, начинается с переданного индекса и до второго переданного индекса.
     * Элемент находящийся на месте по второму индексу не добавляется в новый список.
     * @param fromIndex индекс элемента с которого нужно начать добавлять элементы в новый список
     * @param toIndex индекс элемента до которого нужно добавлять элементы в новый список. Элемент по этому индексу не добавляется в новый список
     * @return возвращает список с добавленными в него элементами по указанным индексам
     */
    MyNewList<T> subList(int fromIndex, int toIndex);
}
